syntax = "proto3";

package api;

// TODO use google/protobuf/duration.proto when those issues are resolved?
// https://github.com/grpc-ecosystem/grpc-gateway/issues/160
// https://github.com/grpc-ecosystem/grpc-gateway/issues/400
// import "google/protobuf/duration.proto";

import "google/api/annotations.proto";

message ScrapeJob {
    // Scrape job name: "example-job" (required)
    string name = 1;

    // Scrape interval: "10s"
    string interval = 2;

    // Scrape timeout: "5s"
    string timeout = 3;

    // Metrics path: "/metrics"
    string path = 4;

    // Scheme for scrapping: "http" or "https"
    string scheme = 5;

    // Hosts and ports: "127.0.0.1:9090" (required)
    repeated string statis_targets = 6;
}

message ScrapeJobsListRequest {
}

message ScrapeJobsListResponse {
    repeated ScrapeJob scrape_jobs = 1;
}

message ScrapeJobsGetRequest {
    string name = 1;
}

message ScrapeJobsGetResponse {
    ScrapeJob scrape_job = 1;
}

message ScrapeJobsCreateRequest {
    ScrapeJob scrape_job = 1;
}

message ScrapeJobsCreateResponse {
}

message ScrapeJobsDeleteRequest {
    string name = 1;
}

message ScrapeJobsDeleteResponse {
}

service ScrapeJobs {
    // List returns all scrape jobs.
    rpc List(ScrapeJobsListRequest) returns (ScrapeJobsListResponse) {
        option (google.api.http) = {
            get: "/v0/scrape-jobs"
        };
    }

    // Get returns a scrape job by name.
    // Errors: NotFound(5) if no such scrape job is present.
    rpc Get(ScrapeJobsGetRequest) returns (ScrapeJobsGetResponse) {
        option (google.api.http) = {
            get: "/v0/scrape-jobs/{name}"
        };
    }

    // Create creates a new scrape job.
    // Errors: InvalidArgument(3) if some argument is not valid,
    // AlreadyExists(6) if scrape job with that name is already present.
    rpc Create(ScrapeJobsCreateRequest) returns (ScrapeJobsCreateResponse) {
        option (google.api.http) = {
            post: "/v0/scrape-jobs",
            body: "*"
        };
    }

    // Delete removes existing scrape job by name.
    // Errors: NotFound(5) if no such scrape job is present.
    rpc Delete(ScrapeJobsDeleteRequest) returns (ScrapeJobsDeleteResponse) {
        option (google.api.http) = {
            delete: "/v0/scrape-jobs/{name}"
        };
    }
}
