// Code generated by go-swagger; DO NOT EDIT.

package demo

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewErrorParams creates a new ErrorParams object
// with the default values initialized.
func NewErrorParams() *ErrorParams {
	var ()
	return &ErrorParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewErrorParamsWithTimeout creates a new ErrorParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewErrorParamsWithTimeout(timeout time.Duration) *ErrorParams {
	var ()
	return &ErrorParams{

		timeout: timeout,
	}
}

// NewErrorParamsWithContext creates a new ErrorParams object
// with the default values initialized, and the ability to set a context for a request
func NewErrorParamsWithContext(ctx context.Context) *ErrorParams {
	var ()
	return &ErrorParams{

		Context: ctx,
	}
}

// NewErrorParamsWithHTTPClient creates a new ErrorParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewErrorParamsWithHTTPClient(client *http.Client) *ErrorParams {
	var ()
	return &ErrorParams{
		HTTPClient: client,
	}
}

/*ErrorParams contains all the parameters to send to the API endpoint
for the error operation typically these are written to a http.Request
*/
type ErrorParams struct {

	/*Code*/
	Code *int64
	/*Key*/
	Key *string
	/*Value*/
	Value *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the error params
func (o *ErrorParams) WithTimeout(timeout time.Duration) *ErrorParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the error params
func (o *ErrorParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the error params
func (o *ErrorParams) WithContext(ctx context.Context) *ErrorParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the error params
func (o *ErrorParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the error params
func (o *ErrorParams) WithHTTPClient(client *http.Client) *ErrorParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the error params
func (o *ErrorParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCode adds the code to the error params
func (o *ErrorParams) WithCode(code *int64) *ErrorParams {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the error params
func (o *ErrorParams) SetCode(code *int64) {
	o.Code = code
}

// WithKey adds the key to the error params
func (o *ErrorParams) WithKey(key *string) *ErrorParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the error params
func (o *ErrorParams) SetKey(key *string) {
	o.Key = key
}

// WithValue adds the value to the error params
func (o *ErrorParams) WithValue(value *string) *ErrorParams {
	o.SetValue(value)
	return o
}

// SetValue adds the value to the error params
func (o *ErrorParams) SetValue(value *string) {
	o.Value = value
}

// WriteToRequest writes these params to a swagger request
func (o *ErrorParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Code != nil {

		// query param code
		var qrCode int64
		if o.Code != nil {
			qrCode = *o.Code
		}
		qCode := swag.FormatInt64(qrCode)
		if qCode != "" {
			if err := r.SetQueryParam("code", qCode); err != nil {
				return err
			}
		}

	}

	if o.Key != nil {

		// query param key
		var qrKey string
		if o.Key != nil {
			qrKey = *o.Key
		}
		qKey := qrKey
		if qKey != "" {
			if err := r.SetQueryParam("key", qKey); err != nil {
				return err
			}
		}

	}

	if o.Value != nil {

		// query param value
		var qrValue string
		if o.Value != nil {
			qrValue = *o.Value
		}
		qValue := qrValue
		if qValue != "" {
			if err := r.SetQueryParam("value", qValue); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
